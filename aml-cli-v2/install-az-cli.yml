steps:
  - task: AzureCLI@2
    displayName: Install AZ CLI and dependencies
    inputs:
      azureSubscription: $(ado_service_connection_aml_ws)
      scriptType: bash
      scriptLocation: inlineScript
      workingDirectory: $(System.DefaultWorkingDirectory)
      inlineScript: |
        set -e # fail on error
        
        # Check if the virtual environment exists, create if it doesn't
        if [ ! -d ~/myagent/$(virtual_environment) ]; then
          echo "Creating virtual environment $(virtual_environment)"
          python3 -m venv ~/myagent/$(virtual_environment)
        else
          echo "Virtual environment $(virtual_environment) already exists"
        fi

        # Check if we're in the virtual environment, activate only if needed
        if [[ "$VIRTUAL_ENV" != */myagent/$(virtual_environment) ]]; then
          echo "Activating $(virtual_environment) virtual environment"
          source ~/myagent/$(virtual_environment)/bin/activate
        else
          echo "Already in $(virtual_environment) virtual environment"
        fi
        
        echo "Python version: $(python --version)"
        echo "Pip version: $(pip --version)"

        # Upgrade pip, setuptools, and wheel
        python -m pip install --upgrade pip setuptools wheel
        # Install or upgrade azure-cli
        python -m pip install --upgrade azure-cli

        # Function to compare versions
        version_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }

        # Function to check and install package
        check_and_install() {
          package=$1
          required_version=$2
          installed_version=$(pip show $package 2>/dev/null | grep Version | cut -d ' ' -f 2)
          
          if [ -z "$installed_version" ]; then
            echo "Installing $package $required_version"
            pip install "$package==$required_version"
          elif version_gt $required_version $installed_version; then
            echo "Updating $package from $installed_version to $required_version"
            pip install --upgrade "$package==$required_version"
          else
            echo "$package is already at version $installed_version (required: $required_version)"
          fi
        }

        # List of packages and their required versions
        packages="azure-ai-ml:1.1.0 azure-common:1.1.28 azure-core:1.26.1 azure-identity:1.10.0 azure-mgmt-core:1.3.0 azure-storage-blob:12.14.1 azure-storage-file-datalake:12.9.1 azure-storage-file-share:12.7.0"

        # Check and install packages if necessary
        echo "$packages" | tr ' ' '\n' | while IFS=':' read -r package version; do
          check_and_install "$package" "$version"
        done

        # Update these packages to latest versions
        pip install --upgrade pyOpenSSL cryptography requests

        # Display Azure CLI version
        az version

        echo "Azure CLI and dependencies installation completed."

    env:
      PYTHONPATH: ~/myagent/$(virtual_environment)/lib/python3.12/site-packages:$(PYTHONPATH)